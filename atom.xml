<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KuroNekoNeko&#39;s World</title>
  
  <subtitle>KuroNeko Nano</subtitle>
  <link href="/kuroneko_blog/atom.xml" rel="self"/>
  
  <link href="http://kuronekonano.github.io/kuroneko_blog/"/>
  <updated>2021-03-06T22:43:35.983Z</updated>
  <id>http://kuronekonano.github.io/kuroneko_blog/</id>
  
  <author>
    <name>KuroNeko Nano</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2021/03/07/hello-world/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2021/03/07/hello-world/</id>
    <published>2021-03-06T22:43:35.982Z</published>
    <updated>2021-03-06T22:43:35.983Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>VPN与SS/SSR的区别</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/03/01/the-difference-of-ssr-and-vpn/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/03/01/the-difference-of-ssr-and-vpn/</id>
    <published>2020-03-01T07:57:41.000Z</published>
    <updated>2021-03-06T22:43:35.983Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;毕竟大洋葱是跟tor相关的，而国内想要上tor，大部分是还是要通过翻墙来实现&lt;br&gt;以前我们翻墙的时候最常用的就是vpn了，而2年前，ss被开源(ss出现一年后，开源社区的破娃小姐姐在ss的基础上发布了ssr)，现在已经是最流行的翻墙方案。&lt;/p&gt;
&lt;p&gt;下面我从三个部分做
        
      
    
    </summary>
    
    
    
      <category term="computer network" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/computer-network/"/>
    
  </entry>
  
  <entry>
    <title>UPC-3029 Bless You Autocorrect!(字典树+BFS)</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/upc-3029-bless-you-autocorrect/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/upc-3029-bless-you-autocorrect/</id>
    <published>2020-01-08T10:01:30.000Z</published>
    <updated>2021-03-06T22:43:35.982Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Typing on phones can be tedious. It is easy to make typing mistakes, which is why most phones come with an autocorrect feature.
        
      
    
    </summary>
    
    
    
      <category term="BFS" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>leetcode在线编程【树专题】</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-tree-prombles/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-tree-prombles/</id>
    <published>2020-01-08T09:59:35.000Z</published>
    <updated>2021-03-06T22:43:35.982Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;二叉树的最小深度&lt;/strong&gt;&lt;br&gt;递归遍历每个节点并计数深度，遍历到叶子节点时更新最小深度，并返回，非叶子节点取返回值的最小深度返回&lt;/p&gt;
&lt;pre class=&quot; language-c&quot;&gt;&lt;code
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>重拾排序——快速排序、归并排序</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/sort-study/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/sort-study/</id>
    <published>2020-01-08T09:57:04.000Z</published>
    <updated>2021-03-06T22:43:35.983Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;复习了下快速排序的写法和原理，其实现在看起来并没有很难，缩减代码后更是显得非常简略。&lt;/p&gt;
&lt;p&gt;快排的基本思想是随意选择数组中一个数字作为标记值，然后将范围内所有大于标记值的数放在标记值位置的右边，所有小于标记值的数放在标记值的左边。做这个操作的范围不断缩小，最后递归到
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>目前为止见到的精妙面试算法题【部分剑指offer原题】</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/code-interview/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/code-interview/</id>
    <published>2020-01-08T09:49:50.000Z</published>
    <updated>2021-03-06T22:43:35.982Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;都是思维题，不容易想到，但是结果非常简单易懂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;题目为：给你1-1000个连续自然数，然后从中随机去掉两个，再打乱顺序，要求只遍历一次，求出被去掉的两个数。&lt;/strong&gt;&lt;br&gt;使用异或。&lt;/p&gt;
&lt;p&gt;说说异或的两个特性：顺序无关 /
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python实现可视化界面多线程豆瓣电影信息爬虫，并绘制统计图分析结果</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/python-scrapy-movie/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/python-scrapy-movie/</id>
    <published>2020-01-08T09:46:52.000Z</published>
    <updated>2021-03-06T22:43:35.982Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;完整代码见链接：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="scrapy" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer +【 中间人攻击  】详解</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/https-hyper-text-transfer-protocol-over-secure-socket-layer/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/https-hyper-text-transfer-protocol-over-secure-socket-layer/</id>
    <published>2020-01-08T09:43:02.000Z</published>
    <updated>2021-03-06T22:43:35.981Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;HTTP即超文本传输协议(HyperText Transfer Protocol)&lt;/strong&gt;
        
      
    
    </summary>
    
    
    
      <category term="computer network" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/computer-network/"/>
    
  </entry>
  
  <entry>
    <title>Hrbust-1284 编辑距离【LCS最长公共子序列】 /  leetcode 72.编辑距离</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-72-edit-distance/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-72-edit-distance/</id>
    <published>2020-01-08T09:40:58.000Z</published>
    <updated>2021-03-06T22:43:35.981Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;编辑距离&lt;br&gt;Time Limit: 1000 MS    Memory Limit: 65536 K&lt;br&gt;Total Submit: 937(198 users)    Total Accepted: 373(190 users)    Rating:    
        
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 57.插入区间</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-57-insert-interval/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/leetcode-57-insert-interval/</id>
    <published>2020-01-08T09:20:23.000Z</published>
    <updated>2021-03-06T22:43:35.981Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;给出一个无重叠的 ，按照区间起始端点排序的区间列表。&lt;/p&gt;
&lt;p&gt;在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: intervals = [[1,3],[6,9]],
        
      
    
    </summary>
    
    
    
      <category term="LeetCode" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript splice() 函数</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/08/javascript-splice-fun/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/08/javascript-splice-fun/</id>
    <published>2020-01-08T07:39:58.000Z</published>
    <updated>2021-03-06T22:43:35.981Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;今天遇到一个JavaScript里array的函数splice，构造非常奇特&lt;br&gt;W3Cschool中有如下介绍，不在赘述参数内容：&lt;br&gt;&lt;img
        
      
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>【图像处理：平移，缩放，旋转等】仿射变换过程与仿射变换矩阵</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2020/01/06/tu-xiang-chu-li-ping-yi-suo-fang-xuan-ze-deng-fang-she-bian-huan-guo-cheng-yu-fang-she-bian-huan-ju-zhen/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2020/01/06/tu-xiang-chu-li-ping-yi-suo-fang-xuan-ze-deng-fang-she-bian-huan-guo-cheng-yu-fang-she-bian-huan-ju-zhen/</id>
    <published>2020-01-06T09:03:51.000Z</published>
    <updated>2021-03-06T22:43:35.983Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;遇到了一些情况需要将图片旋转一定角度使其相对来说是符合人类认知的形式【就是歪图转正】于是接触了处理图片的经典方式——仿射变换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义：仿射变换的功能是从二维坐标到二维坐标之间的线性变换，且保持二维图形的“平直性”和“平行
        
      
    
    </summary>
    
    
    
      <category term="picture calculation algorithm" scheme="http://kuronekonano.github.io/kuroneko_blog/tags/picture-calculation-algorithm/"/>
    
  </entry>
  
  <entry>
    <title>my first article: kuronekonano~start!</title>
    <link href="http://kuronekonano.github.io/kuroneko_blog/2019/12/30/my-first-article-kuronekonano-start/"/>
    <id>http://kuronekonano.github.io/kuroneko_blog/2019/12/30/my-first-article-kuronekonano-start/</id>
    <published>2019-12-30T12:23:48.000Z</published>
    <updated>2021-03-06T22:43:35.983Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;script&gt;
        document.querySelectorAll(&#39;.github-emoji&#39;)
          .forEach(el =&gt; {
            if (!el.dataset.src) { return; }
       
        
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
